-- Customers Table
CREATE TABLE Customers (
    customer_id INT PRIMARY KEY,
    first_name VARCHAR(255),
    last_name VARCHAR(255),
    email VARCHAR(255),
    phone_number VARCHAR(20)
);

INSERT INTO Customers VALUES
(1, 'John', 'Doe', 'john.doe@email.com', '123-456-7890'),
(2, 'Jane', 'Smith', 'jane.smith@email.com', '987-654-3210'),
(3, 'Bob', 'Johnson', 'bob.johnson@email.com', '555-123-4567'),
(4, 'Alice', 'Williams', 'alice@email.com', '777-888-9999'),
(5, 'Charlie', 'Brown', 'charlie.brown@email.com', '111-222-3333'),
(6, 'Eva', 'Lee', 'eva.lee@email.com', '444-555-6666');

-- Orders Table
CREATE TABLE Orders (
    order_id INT PRIMARY KEY,
    customer_id INT,
    order_date DATE,
    product_id INT,
    quantity INT,
    FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)
);

INSERT INTO Orders VALUES
(101, 1, '2024-01-10', 1, 2),
(102, 2, '2024-01-15', 3, 1),
(103, 3, '2024-01-20', 2, 3),
(104, 1, '2024-01-25', 4, 1),
(105, 4, '2024-01-30', 1, 2),
(106, 5, '2024-02-05', 3, 1);

-- Products Table
CREATE TABLE Products (
    product_id INT PRIMARY KEY,
    product_name VARCHAR(255),
    description VARCHAR(255),
    price DECIMAL(10, 2),
    quantity_in_stock INT
);

INSERT INTO Products VALUES
(1, 'Laptop', 'High-performance laptop', 1200.00, 10),
(2, 'Smartphone', 'Latest smartphone model', 800.00, 15),
(3, 'Tablet', 'Large screen tablet', 500.00, 5),
(4, 'Headphones', 'Noise-canceling headphones', 150.00, 20),
(5, 'Printer', 'Wireless printer', 200.00, 8),
(6, 'Camera', 'Digital camera with zoom', 300.00, 12);

-- Employees Table
CREATE TABLE Employees (
    employee_id INT PRIMARY KEY,
    first_name VARCHAR(255),
    last_name VARCHAR(255),
    department VARCHAR(255),
    manager_id INT,
    project_id INT,
    FOREIGN KEY (manager_id) REFERENCES Employees(employee_id),
    FOREIGN KEY (project_id) REFERENCES Projects(project_id)
);

INSERT INTO Employees VALUES
(1, 'Michael', 'Scott', 'Management', NULL, 101),
(2, 'Jim', 'Halpert', 'Sales', 1, 102),
(3, 'Pam', 'Beesly', 'Sales', 1, 103),
(4, 'Dwight', 'Schrute', 'Sales', 1, 104),
(5, 'Angela', 'Martin', 'Accounting', 4, NULL),
(6, 'Oscar', 'Martinez', 'Accounting', 4, NULL);

-- Projects Table (for Right Join)
CREATE TABLE Projects (
    project_id INT PRIMARY KEY,
    project_name VARCHAR(255)
);

INSERT INTO Projects VALUES
(101, 'Dunder Mifflin Paper Distribution'),
(102, 'Sales Training'),
(103, 'Client Relations'),
(104, 'Schrute Farms Bed & Breakfast');



-Question 1 inner Join

-- List the names of customers who have placed orders, along with the order dates.
-- Show the product names and prices for all orders in the system.
SELECT c.first_name, c.last_name, o.order_date, p.product_name, p.price
FROM Customers c
INNER JOIN Orders o ON c.customer_id = o.customer_id
INNER JOIN Products p ON o.product_id = p.product_id;


Question 2 Left Join

-- Display all products, including their names, descriptions, and available quantities.
-- Highlight products with zero stock.
SELECT p.product_name, p.description, p.quantity_in_stock
FROM Products p
LEFT JOIN Orders o ON p.product_id = o.product_id
WHERE p.quantity_in_stock = 0;

-- List all employees, their departments, and their assigned project names (if any).
SELECT e.first_name, e.last_name, e.department, p.project_name
FROM Employees e
LEFT JOIN Projects p ON e.project_id = p.project_id;

Question 3 Right JOin'

-- Show all customers with their email addresses, even those who haven't placed any orders.
-- List all projects, along with the names of employees assigned to them (if any).
SELECT c.first_name, c.last_name, c.email, o.order_date
FROM Customers c
RIGHT JOIN Orders o ON c.customer_id = o.customer_id;

SELECT p.project_name, e.first_name, e.last_name
FROM Projects p
RIGHT JOIN Employees e ON p.project_id = e.project_id;


Question 4 Union

-- Create a single list of all distinct email addresses used by either customers or employees.
SELECT email FROM Customers
UNION
SELECT email FROM Employees;

-- Combine employee names and customer names into a single list, removing duplicates.
SELECT first_name, last_name FROM Customers
UNION
SELECT first_name, last_name FROM Employees;



question 5 Alias (using aliases to make the output more readable):

-- Example with aliasing in the Inner Join query
SELECT c.first_name AS customer_first_name, c.last_name AS customer_last_name,
       o.order_date, p.product_name, p.price
FROM Customers c
INNER JOIN Orders o ON c.customer_id = o.customer_id
INNER JOIN Products p ON o.product_id = p.product_id;

